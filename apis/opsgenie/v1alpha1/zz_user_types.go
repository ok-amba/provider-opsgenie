/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserAddressObservation struct {
}

type UserAddressParameters struct {

	// +kubebuilder:validation:Required
	City *string `json:"city" tf:"city,omitempty"`

	// +kubebuilder:validation:Required
	Country *string `json:"country" tf:"country,omitempty"`

	// +kubebuilder:validation:Required
	Line *string `json:"line" tf:"line,omitempty"`

	// +kubebuilder:validation:Required
	State *string `json:"state" tf:"state,omitempty"`

	// +kubebuilder:validation:Required
	Zipcode *string `json:"zipcode" tf:"zipcode,omitempty"`
}

type UserObservation struct {

	// The ID of the Opsgenie User.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type UserParameters struct {

	// The Full Name of the User.
	// +kubebuilder:validation:Required
	FullName *string `json:"fullName" tf:"full_name,omitempty"`

	// Location information for the user. Please look at Supported Locale Ids for available locales.
	// +kubebuilder:validation:Optional
	Locale *string `json:"locale,omitempty" tf:"locale,omitempty"`

	// The Role assigned to the User. Either a built-in such as 'Admin' or 'User' - or the name of a custom role.
	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// Skype username of the user.
	// +kubebuilder:validation:Optional
	SkypeUsername *string `json:"skypeUsername,omitempty" tf:"skype_username,omitempty"`

	// A list of tags to be associated with the user.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Timezone information of the user. Please look at Supported Timezone Ids for available timezones.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// Address of the user.
	// +kubebuilder:validation:Optional
	UserAddress []UserAddressParameters `json:"userAddress,omitempty" tf:"user_address,omitempty"`

	// Details about the user in form of key and list. of values.
	// +kubebuilder:validation:Optional
	UserDetails map[string]*string `json:"userDetails,omitempty" tf:"user_details,omitempty"`

	// The email address associated with this user. Opsgenie defines that this must not be longer than 100 characters and must contain lowercase characters only.
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// User is the Schema for the Users API. Manages a User within Opsgenie.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opsgenie}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserSpec   `json:"spec"`
	Status            UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
