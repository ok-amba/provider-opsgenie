/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HeartbeatObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HeartbeatParameters struct {

	// Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is "HeartbeatName is expired".
	// +kubebuilder:validation:Optional
	AlertMessage *string `json:"alertMessage,omitempty" tf:"alert_message,omitempty"`

	// Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
	// +kubebuilder:validation:Optional
	AlertPriority *string `json:"alertPriority,omitempty" tf:"alert_priority,omitempty"`

	// Specifies the alert tags for heartbeat expiration alert.
	// +kubebuilder:validation:Optional
	AlertTags []*string `json:"alertTags,omitempty" tf:"alert_tags,omitempty"`

	// An optional description of the heartbeat
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (True) Enable/disable heartbeat monitoring.
	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Specifies how often a heartbeat message should be expected.
	// +kubebuilder:validation:Required
	Interval *float64 `json:"interval" tf:"interval,omitempty"`

	// Interval specified as minutes, hours or days.
	// +kubebuilder:validation:Required
	IntervalUnit *string `json:"intervalUnit" tf:"interval_unit,omitempty"`

	// Name of the heartbeat
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Owner team of the heartbeat.
	// +crossplane:generate:reference:type=Team
	// +kubebuilder:validation:Optional
	OwnerTeamID *string `json:"ownerTeamId,omitempty" tf:"owner_team_id,omitempty"`

	// Reference to a Team to populate ownerTeamId.
	// +kubebuilder:validation:Optional
	OwnerTeamIDRef *v1.Reference `json:"ownerTeamIdRef,omitempty" tf:"-"`

	// Selector for a Team to populate ownerTeamId.
	// +kubebuilder:validation:Optional
	OwnerTeamIDSelector *v1.Selector `json:"ownerTeamIdSelector,omitempty" tf:"-"`
}

// HeartbeatSpec defines the desired state of Heartbeat
type HeartbeatSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HeartbeatParameters `json:"forProvider"`
}

// HeartbeatStatus defines the observed state of Heartbeat.
type HeartbeatStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HeartbeatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Heartbeat is the Schema for the Heartbeats API. Manages Heartbeat within Opsgenie.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opsgenie}
type Heartbeat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HeartbeatSpec   `json:"spec"`
	Status            HeartbeatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HeartbeatList contains a list of Heartbeats
type HeartbeatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Heartbeat `json:"items"`
}

// Repository type metadata.
var (
	Heartbeat_Kind             = "Heartbeat"
	Heartbeat_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Heartbeat_Kind}.String()
	Heartbeat_KindAPIVersion   = Heartbeat_Kind + "." + CRDGroupVersion.String()
	Heartbeat_GroupVersionKind = CRDGroupVersion.WithKind(Heartbeat_Kind)
)

func init() {
	SchemeBuilder.Register(&Heartbeat{}, &HeartbeatList{})
}
